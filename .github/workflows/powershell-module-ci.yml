name: PowerShell Module CI

env:
  # Set the release type of the release, valid values are 'major', 'minor' or 'patch'
  RELEASE_TYPE: "patch"
  # override version boolean. If specified, valid vlaues are 'true' or 'false'
  OVERRIDE_VERSION: "false"
on: [push]
jobs:
  validate-env-variables:
    runs-on: ubuntu-latest
    steps:
      - shell: pwsh
        run: |
          # validate release type variables
          $env:OVERRIDE_VERSION | Should -BeIn @('true', 'false')
          $env:RELEASE_TYPE |  Should -BeIn @('major','minor','patch')
  Publish-PowerShell-Artifact:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      Source: "CodeArtifact"
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            PowerShell
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - shell: pwsh
        run: |
          . "./PowerShell/Deploy/BuildNuspecFromPsd1.ps1" -RequiredModulesRepo PSGallery
    needs: [Validate-Module, Test-Module]
  Validate-Module:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            PowerShell
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - shell: pwsh
        run: |
          . "./PowerShell/JumpCloud Module/Tests/InvokePester.ps1" -ModuleValidation
    needs: setup-build-dependancies
  Test-Module:
    runs-on: ubuntu-latest
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            PowerShell
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - shell: pwsh
        env:
          PESTER_APIKEY: ${{ secrets.PESTER_APIKEY }}
          PESTER_ORGID: ${{ secrets.PESTER_ORGID }}
          PESTER_MSP_APIKEY: ${{ secrets.PESTER_MSP_APIKEY }}
        run: |
          . "./PowerShell/JumpCloud Module/Tests/InvokePester.ps1" -JumpCloudApiKey "$env:PESTER_APIKEY" -JumpCloudApiKeyMsp "$env:PESTER_MSP_APIKEY" -JumpCloudMspOrg "$env:PESTER_ORGID" -ExcludeTagList "ModuleValidation, JCDeployment, MSP" -IncludeTagList * -RequiredModulesRepo "PSGallery"
    needs: [setup-build-dependancies, Validate-Module]
  Test-Module-MSP:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            PowerShell
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - shell: pwsh
        env:
          PESTER_APIKEY: ${{ secrets.PESTER_APIKEY }}
          PESTER_ORGID: ${{ secrets.PESTER_ORGID }}
          PESTER_MSP_APIKEY: ${{ secrets.PESTER_MSP_APIKEY }}
        run: |
          . "./PowerShell/JumpCloud Module/Tests/InvokePester.ps1" -JumpCloudApiKey "$env:PESTER_APIKEY" -JumpCloudApiKeyMsp "$env:PESTER_MSP_APIKEY" -JumpCloudMspOrg "$env:PESTER_ORGID" -ExcludeTagList "None" -IncludeTagList "MSP" -RequiredModulesRepo "PSGallery"
    needs: [setup-build-dependancies, Validate-Module, Test-Module]

  setup-build-dependancies:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v4
      - name: Setup PowerShell Module Cache
        id: cacher
        uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - name: Install dependencies
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted

          If (!(Get-PackageProvider -Name:('NuGet') -ListAvailable -ErrorAction:('SilentlyContinue'))) {
              Write-Host ('[status]Installing package provider NuGet');
              Install-PackageProvider -Name:('NuGet') -Scope:('CurrentUser') -Force
          }

          $PSDependencies = @{
              'PowerShellGet'                         = @{Repository = 'PSGallery'; RequiredVersion = '3.0.12-beta' }
              'PackageManagement'                     = @{Repository = 'PSGallery'; RequiredVersion = '1.4.8.1' }
              'PSScriptAnalyzer'                      = @{Repository = 'PSGallery'; RequiredVersion = '1.19.1' }
              'PlatyPS'                               = @{Repository = 'PSGallery'; RequiredVersion = '0.14.2' }
              'AWS.Tools.Common'                      = @{Repository = 'PSGallery'; RequiredVersion = '4.1.122' }
              'AWS.Tools.CodeArtifact'                = @{Repository = 'PSGallery'; RequiredVersion = '4.1.122' }
              'JumpCloud.SDK.V1'                      = @{Repository = 'PSGallery'; RequiredVersion = '0.0.35'}
              'JumpCloud.SDK.V2'                      = @{Repository = 'PSGallery'; RequiredVersion = '0.0.39'}
              'JumpCloud.SDK.DirectoryInsights'       = @{Repository = 'PSGallery'; RequiredVersion = '0.0.23'}
          }

          foreach ($RequiredModule in $PSDependencies.Keys) {
              If ([System.String]::IsNullOrEmpty((Get-InstalledModule | Where-Object { $_.Name -eq $RequiredModule }))) {
                  Write-Host("[status]Installing module: '$RequiredModule'; version: $($PSDependencies[$RequiredModule].RequiredVersion) from $($PSDependencies[$RequiredModule].Repository)")
                  Install-Module -Name $RequiredModule -Repository:($($PSDependencies[$RequiredModule].Repository)) -RequiredVersion:($($PSDependencies[$RequiredModule].RequiredVersion)) -AllowPrerelease -Force
              }
          }
